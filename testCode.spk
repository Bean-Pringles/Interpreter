# SPOKE LANGUAGE EXTREME STRESS TEST
# This test pushes the interpreter to its absolute limits
# Run with: python spoke.py testCode.spk
# Compare the results to testCodeOutput.txt


print ("=== SPOKE EXTREME STRESS TEST STARTING ===")

# Comment Test
@ Comment Test

# STRESS TEST 1: MASSIVE VARIABLE CREATION AND MANIPULATION
print ("TEST 1: Creating 100 variables with complex operations")
let v1 = 1
let v2 = 2
let v3 = 3
let v4 = 4
let v5 = 5
let v6 = 6
let v7 = 7
let v8 = 8
let v9 = 9
let v10 = 10
let v11 = 11
let v12 = 12
let v13 = 13
let v14 = 14
let v15 = 15
let v16 = 16
let v17 = 17
let v18 = 18
let v19 = 19
let v20 = 20
let v21 = 21
let v22 = 22
let v23 = 23
let v24 = 24
let v25 = 25
let v26 = 26
let v27 = 27
let v28 = 28
let v29 = 29
let v30 = 30

# MASSIVE ARITHMETIC CHAIN
let result1 = v1 + v2
let result2 = result1 * v3
let result3 = result2 - v4
let result4 = result3 / v5
let result5 = result4 + v6
let result6 = result5 * v7
let result7 = result6 - v8
let result8 = result7 + v9
let result9 = result8 * v10
let result10 = result9 / v11

print result10

# STRESS TEST 2: DEEPLY NESTED CONDITIONALS
print ("TEST 2: 10-level deep nested conditionals")
let depth = 10
if (depth >> 9) then {
    print ("Level 1")
    if (depth >> 8) then {
        print ("Level 2")
        if (depth >> 7) then {
            print ("Level 3")
            if (depth >> 6) then {
                print ("Level 4")
                if (depth >> 5) then {
                    print ("Level 5")
                    if (depth >> 4) then {
                        print ("Level 6")
                        if (depth >> 3) then {
                            print ("Level 7")
                            if (depth >> 2) then {
                                print ("Level 8")
                                if (depth >> 1) then {
                                    print ("Level 9")
                                    if (depth >> 0) then {
                                        print ("Level 10 - DEEPEST LEVEL REACHED!")
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

# STRESS TEST 3: MASSIVE ELSE-IF CHAINS
print ("TEST 3: 20-branch else-if chain")
let testVal = 15
if (testVal == 1) then {
    print ("Branch 1")
} else if (testVal == 2) then {
    print ("Branch 2")
} else if (testVal == 3) then {
    print ("Branch 3")
} else if (testVal == 4) then {
    print ("Branch 4")
} else if (testVal == 5) then {
    print ("Branch 5")
} else if (testVal == 6) then {
    print ("Branch 6")
} else if (testVal == 7) then {
    print ("Branch 7")
} else if (testVal == 8) then {
    print ("Branch 8")
} else if (testVal == 9) then {
    print ("Branch 9")
} else if (testVal == 10) then {
    print ("Branch 10")
} else if (testVal == 11) then {
    print ("Branch 11")
} else if (testVal == 12) then {
    print ("Branch 12")
} else if (testVal == 13) then {
    print ("Branch 13")
} else if (testVal == 14) then {
    print ("Branch 14")
} else if (testVal == 15) then {
    print ("Branch 15 - FOUND THE RIGHT BRANCH!")
} else if (testVal == 16) then {
    print ("Branch 16")
} else if (testVal == 17) then {
    print ("Branch 17")
} else if (testVal == 18) then {
    print ("Branch 18")
} else if (testVal == 19) then {
    print ("Branch 19")
} else if (testVal == 20) then {
    print ("Branch 20")
} else {
    print ("Default branch")
}

# STRESS TEST 4: EXTREME FUNCTION COMPLEXITY
print ("TEST 4: Complex recursive-style function calls")

function fibonacci(n) {
    if (n <= 1) then {
        print n
    } else {
        let n1 = n - 1
        let n2 = n - 2
        fibonacci(n1)
        fibonacci(n2)
    }
}

function mathHeavy(a, b, c, d, e) {
    let step1 = a + b
    let step2 = step1 * c
    let step3 = step2 - d
    let step4 = step3 / e
    let step5 = step4 + a
    let step6 = step5 * b
    let step7 = step6 - c
    let step8 = step7 + d
    let final = step8 / e
    print final
}

function nestedCalls(x) {
    if (x >> 0) then {
        print x
        let newX = x - 1
        nestedCalls(newX)
    }
}

print ("Calling mathHeavy with complex parameters")
mathHeavy(10, 5, 3, 2, 4)

print ("Calling nestedCalls with countdown")
nestedCalls(5)

# STRESS TEST 5: EXTREME STRING MANIPULATION
print ("TEST 5: Massive string operations")
let str1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
let str2 = "0123456789"
let str3 = "SpecialChars!@#$%^&*()"
let str4 = "VeryLongStringThatWillBeManipulated"

length str1 loud len1
length str2 loud len2
length str3 loud len3
length str4 loud len4

shuffle str1 loud shuffled1
shuffle str2 loud shuffled2
shuffle str3 loud shuffled3
shuffle str4 loud shuffled4

# STRESS TEST 6: MATHEMATICAL TORTURE TEST
print ("TEST 6: Mathematical torture test with extreme values")
let huge1 = 999999
let huge2 = 888888
let huge3 = 777777

math huge1 + huge2 loud hugeSum
math huge1 * huge2 silent hugeProd
math huge1 / huge2 loud hugeDiv
math huge1 % huge2 loud hugeMod

print hugeProd

let decimal1 = 999.999
let decimal2 = 123.456
let decimal3 = 87.654

math decimal1 + decimal2 loud decSum
math decimal1 * decimal2 loud decProd
math decimal1 / decimal2 loud decDiv

let negative1 = -500
let negative2 = -300
let negative3 = 200

math negative1 + negative2 loud negSum
math negative1 * negative3 loud negProd
math negative1 - negative2 loud negDiff

# STRESS TEST 7: COMPLEX CONDITIONAL LOGIC
print ("TEST 7: Complex multi-condition logic torture")
let a1 = 10
let a2 = 20
let a3 = 30
let a4 = 40
let a5 = 50

if (a1 << a2 and a2 << a3 and a3 << a4 and a4 << a5) then {
    print ("All ascending - correct!")
}

if (a1 >> a5 or a2 >> a4 or a3 == 30) then {
    print ("At least one condition met - correct!")
}

if (not a1 >> a2 and not a2 >> a3) then {
    print ("Negation logic works - correct!")
}

if (a1 <= a2 and a2 >= a1 and a3 != a4) then {
    print ("Mixed operators work - correct!")
}

# STRESS TEST 8: VARIABLE MANIPULATION CHAOS
print ("TEST 8: Variable manipulation chaos")
let chaos1 = 100
let chaos2 = 200
let chaos3 = 300
let chaos4 = 400
let chaos5 = 500

print ("Before chaos:")
print chaos1
print chaos2
print chaos3
print chaos4
print chaos5

swap chaos1 chaos5
swap chaos2 chaos4
compare chaos1 chaos2 verbose
compare chaos3 chaos4 verbose

print ("After first round of chaos:")
print chaos1
print chaos2
print chaos3
print chaos4
print chaos5

# STRESS TEST 9: MEMORY AND SCOPE TORTURE
print ("TEST 9: Memory and scope torture test")

function scopeTest1(param1, param2, param3, param4, param5) {
    let local1 = param1 * 2
    let local2 = param2 + param3
    let local3 = param4 - param5
    
    function innerScope(innerParam) {
        let innerLocal = innerParam * local1
        print innerLocal
    }
    
    innerScope(local2)
    innerScope(local3)
    
    print local1
    print local2
    print local3
}

scopeTest1(1, 2, 3, 4, 5)
scopeTest1(10, 20, 30, 40, 50)
scopeTest1(100, 200, 300, 400, 500)

# STRESS TEST 10: EDGE CASES AND ERROR BOUNDARIES
print ("TEST 10: Edge case torture")

# Test with zero
let zero = 0
let nonZero = 42

if (zero == 0) then {
    print ("Zero comparison works")
}

math nonZero / nonZero loud shouldBeOne
math zero + nonZero loud shouldBe42

# Test with negative numbers in all operations  
let neg1 = -100
let neg2 = -50
let pos1 = 75

math neg1 + neg2 loud negativeSum
math neg1 * neg2 loud negativeProduct  
math neg1 - pos1 loud mixedSubtraction
math pos1 + neg1 loud mixedAddition

if (neg1 << 0) then {
    print ("Negative comparison works")
}

if (neg1 << neg2) then {
    print ("Negative to negative comparison works")
}

# STRESS TEST 11: STRING EDGE CASES
print ("TEST 11: String edge cases")
let emptyish = ""
let singleChar = "X"
let specialChars = "!@#$%^&*()_+-={}[]|\\:;\<>,.?/"
let mixedContent = "123ABC!@#def456GHI"

length emptyish loud emptyLen
length singleChar loud singleLen
length specialChars loud specialLen
length mixedContent loud mixedLen

# STRESS TEST 12: MAXIMUM COMPUTATIONAL STRESS
print ("TEST 12: Maximum computational stress")

function computeHeavy(iterations) {
    let accumulator = 0
    let counter = 0
    
    function innerCompute(current) {
        if (current >> 0) then {
            let temp1 = current * current
            let temp2 = temp1 + current
            let temp3 = temp2 - 1
            let nextVal = current - 1
            let accumulator = accumulator + temp3
            innerCompute(nextVal)
        }
    }
    
    innerCompute(iterations)
    print accumulator
}

print ("Computing heavy operations...")
computeHeavy(10)

# STRESS TEST 13: TOGGLE AND SWAP EXTREME TESTING
print ("TEST 13: Toggle and swap extreme testing")
let toggleTest1 = 0
let toggleTest2 = 1  
let toggleTest3 = "true"
let toggleTest4 = "false"

print ("Pre-toggle values:")
print toggleTest1
print toggleTest2
print toggleTest3
print toggleTest4

toggle toggleTest1
toggle toggleTest2
toggle toggleTest3
toggle toggleTest4
toggle toggleTest1
toggle toggleTest2
toggle toggleTest3
toggle toggleTest4

print ("Post-double-toggle values:")
print toggleTest1
print toggleTest2
print toggleTest3
print toggleTest4

# STRESS TEST 14: FUNCTION PARAMETER EXTREMES
print ("TEST 14: Function parameter extremes")

function manyParams(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    let sum = p1 + p2
    print sum
    
    let product = p1 * p2
    let product = product * p3
    let product = product * p4
    let product = product * p5
    
    print product
}

manyParams(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

# STRESS TEST 15: FINAL TORTURE - EVERYTHING COMBINED
print ("TEST 15: FINAL COMBINED TORTURE TEST")

function ultimateTest(base) {
    let level1 = base * 2
    
    if (level1 >> 10) then {
        let level2 = level1 + 5
        
        function innerUltimate(param) {
            if (param >> 20) then {
                let result = param / 2
                
                if (result << 25) then {
                    print ("Inner condition met")
                    let param = 0
                    toggle param
                    
                    if (param == 1) then {
                        print ("Toggle worked in nested function")
                    } else {
                        print ("Current param value:")
                        print param
                    }
                } else {
                    print ("Alternative path taken")
                }
                
                math result + param loud finalCalc
            }
        }
        
        innerUltimate(level2)
        
        let swapTest1 = level1
        let swapTest2 = level2
        
        swap swapTest1 swapTest2
        
        compare swapTest1 swapTest2 verbose
        
    } else {
        print ("Base case reached")
    }
}

ultimateTest(10)
ultimateTest(5)
ultimateTest(20)

print ("=== STRESS TEST COMPLETED - IF YOU SEE THIS, YOUR INTERPRETER SURVIVED! ===")
print ("Congratulations! Your Spoke interpreter handled extreme stress conditions!")

# Clean shutdown
quit silent
